import{aw as c,ax as l,ay as S,eP as d,bS as m,kP as h,b1 as w,kQ as v,G as R,kR as $,bv as u,q as f,e9 as j}from"./index-a5053c33.js";let s=class extends d{constructor(t){super(t),this.geometries=[],this.outSpatialReference=null,this.transformation=null,this.transformForward=null}toJSON(){const t=this.geometries.map(a=>a.toJSON()),r=this.geometries[0],e={};return e.outSR=this.outSpatialReference.wkid||JSON.stringify(this.outSpatialReference.toJSON()),e.inSR=r.spatialReference.wkid||JSON.stringify(r.spatialReference.toJSON()),e.geometries=JSON.stringify({geometryType:m(r),geometries:t}),this.transformation&&(e.transformation=this.transformation.wkid||JSON.stringify(this.transformation)),this.transformForward!=null&&(e.transformForward=this.transformForward),e}};c([l()],s.prototype,"geometries",void 0),c([l({json:{read:{source:"outSR"}}})],s.prototype,"outSpatialReference",void 0),c([l()],s.prototype,"transformation",void 0),c([l()],s.prototype,"transformForward",void 0),s=c([S("esri.rest.support.ProjectParameters")],s);const p=s,J=h(p);async function N(o,t,r){t=J(t);const e=w(o),a={...e.query,f:"json",...t.toJSON()},i=t.outSpatialReference,n=m(t.geometries[0]),g=v(a,r);return R(e.path+"/project",g).then(({data:{geometries:y}})=>$(y,n,i))}async function O(o=null,t){var a,i;if(u.geometryServiceUrl)return u.geometryServiceUrl;if(!o)throw new f("internal:geometry-service-url-not-configured");let r;r="portal"in o?o.portal||j.getDefault():o,await r.load({signal:t});const e=(i=(a=r.helperServices)==null?void 0:a.geometry)==null?void 0:i.url;if(!e)throw new f("internal:geometry-service-url-not-configured");return e}async function P(o,t,r=null,e){const a=await O(r,e),i=new p;i.geometries=[o],i.outSpatialReference=t;const n=await N(a,i,{signal:e});if(n&&Array.isArray(n)&&n.length===1)return n[0];throw new f("internal:geometry-service-projection-failed")}export{O as getGeometryServiceURL,P as projectGeometry};
