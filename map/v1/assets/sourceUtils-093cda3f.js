import{id as m,ie as g,aE as p,gL as y,ig as w,eo as f,_}from"./index-92ca6b80.js";class I{constructor(){this.code=null,this.description=null}}class b{constructor(n){this.error=new I,this.globalId=null,this.objectId=null,this.success=!1,this.uniqueId=null,this.error.description=n}}function d(e){return new b(e)}class v{constructor(n){this.globalId=null,this.success=!0,this.objectId=this.uniqueId=n}}function V(e){return new v(e)}const a=new Set;function j(e,n,t,h=!1,u){a.clear();for(const s in t){const i=e.get(s);if(!i)continue;const l=t[s],r=q(i,l);if(r!==l&&u&&u.push({name:"invalid-value-type",message:"attribute value was converted to match the field type",details:{field:i,originalValue:l,sanitizedValue:r}}),a.add(i.name),i&&(h||i.editable)){const c=m(i,r);if(c)return d(g(c,i,r));n[i.name]=r}}for(const s of(e==null?void 0:e.requiredFields)??[])if(!a.has(s.name))return d(`missing required field "${s.name}"`);return null}function q(e,n){let t=n;return typeof n=="string"&&p(e)?t=parseFloat(n):n!=null&&y(e)&&typeof n!="string"&&(t=String(n)),w(t)}let o;function F(e,n){if(!e||!f(n))return e;if("rings"in e||"paths"in e){if(o==null)throw new TypeError("geometry engine not loaded");return o.simplify(n,e)}return e}async function E(){return o==null&&(o=await _(()=>import("./geometryEngineJSON-f81a7f3a.js"),["assets/geometryEngineJSON-f81a7f3a.js","assets/index-92ca6b80.js","assets/index-dc13cc80.css","assets/geometryEngineJSON-1d1e1f93.js","assets/json-48e3ea08.js"])),o}async function G(e,n){!f(e)||n!=="esriGeometryPolygon"&&n!=="esriGeometryPolyline"||await E()}export{V as c,j as d,F as h,d as u,G as y};
