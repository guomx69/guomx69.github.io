import{ah as m,al as d,z as u,B as y,g as h}from"./index-2e5318f2.js";import{d as b}from"./FeatureEffect-f7dddb00.js";import c from"./FeatureLayerView2D-c9676139.js";import"./EffectView-a2790783.js";import"./definitions-b648854a.js";import"./LayerView-291681c3.js";import"./Container-d1d96c5a.js";import"./enums-b14466b3.js";import"./Texture-f87342ae.js";import"./AttributeStoreView-f979641a.js";import"./TiledDisplayObject-9a5a8aa6.js";import"./color-872b970c.js";import"./enums-55085e26.js";import"./VertexElementDescriptor-2925c6af.js";import"./number-e491b09e.js";import"./WGLContainer-094e8b1d.js";import"./VertexArrayObject-f5600c96.js";import"./ProgramTemplate-35172516.js";import"./GeometryUtils-313eb076.js";import"./alignmentUtils-ae955d28.js";import"./StyleDefinition-fbc907c2.js";import"./config-1337d16e.js";import"./earcut-9bfd73cf.js";import"./visualVariablesUtils-35152664.js";import"./cimAnalyzer-c31e96af.js";import"./fontUtils-1356fe6e.js";import"./BidiEngine-9a40f2f4.js";import"./GeometryUtils-53652037.js";import"./utils-3a6e77c7.js";import"./Rect-ea14f53a.js";import"./quantizationUtils-94927ab6.js";import"./floatRGBA-77089d96.js";import"./ExpandedCIM-d098c35d.js";import"./clusterUtils-f975a0b1.js";import"./util-4851600d.js";import"./BitmapTileContainer-ba36130d.js";import"./Bitmap-74814e29.js";import"./TileContainer-915999c5.js";import"./CircularArray-ef508845.js";import"./BufferPool-bb9792ed.js";import"./FeatureContainer-7e14dfbe.js";import"./popupUtils-26ed5a46.js";import"./RefreshableLayerView-cbbcf624.js";function g(i,e){return!i.visible||i.minScale!==0&&e>i.minScale||i.maxScale!==0&&e<i.maxScale}let n=class extends c{initialize(){this.addHandles([u(()=>this.view.scale,()=>this._update(),y)],"constructor")}isUpdating(){var p;const i=this.layer.sublayers.some(l=>l.renderer!=null),e=this._commandsQueue.updating,s=this._updatingRequiredFieldsPromise!=null,t=!this._proxy||!this._proxy.isReady,r=this._pipelineIsUpdating,o=this.tileRenderer==null||((p=this.tileRenderer)==null?void 0:p.updating),a=i&&(e||s||t||r||o);return h("esri-2d-log-updating")&&console.log(`Updating FLV2D: ${a}
  -> hasRenderer ${i}
  -> hasPendingCommand ${e}
  -> updatingRequiredFields ${s}
  -> updatingProxy ${t}
  -> updatingPipeline ${r}
  -> updatingTileRenderer ${o}
`),a}_injectOverrides(i){let e=super._injectOverrides(i);const s=this.view.scale,t=this.layer.sublayers.filter(o=>g(o,s)).map(o=>o.subtypeCode);if(!t.length)return e;e=e??new b().toJSON();const r=`NOT ${this.layer.subtypeField} IN (${t.join(",")})`;return e.where=e.where?`(${e.where}) AND (${r})`:r,e}_setLayersForFeature(i){const e=this.layer.fieldsIndex.get(this.layer.subtypeField),s=i.attributes[e.name],t=this.layer.sublayers.find(r=>r.subtypeCode===s);i.layer=i.sourceLayer=t}_createSchemaConfig(){const i={subtypeField:this.layer.subtypeField,sublayers:Array.from(this.layer.sublayers).map(r=>({featureReduction:null,geometryType:this.layer.geometryType,labelingInfo:r.labelingInfo,labelsVisible:r.labelsVisible,renderer:r.renderer,subtypeCode:r.subtypeCode,orderBy:null}))},e=this.layer.sublayers.map(r=>r.subtypeCode).join(","),s=this.layer.sublayers.length?`${this.layer.subtypeField} IN (${e})`:"1=2";let t=this.layer.definitionExpression?this.layer.definitionExpression+" AND ":"";return t+=s,{...super._createSchemaConfig(),...i,definitionExpression:t}}};n=m([d("esri.views.2d.layers.SubtypeGroupLayerView2D")],n);const ae=n;export{ae as default};
