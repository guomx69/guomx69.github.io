import{ap as m,at as d,z as u,B as y,g as h}from"./index-646a7cf7.js";import{d as b}from"./FeatureEffect-4480942f.js";import c from"./FeatureLayerView2D-13882d1b.js";import"./EffectView-edf43b82.js";import"./definitions-c33d924c.js";import"./LayerView-2b126957.js";import"./Container-a5fb7677.js";import"./enums-b14466b3.js";import"./Texture-8e0a0fd4.js";import"./AttributeStoreView-8d419fe1.js";import"./TiledDisplayObject-6b6b29b3.js";import"./color-412643b9.js";import"./enums-55085e26.js";import"./VertexElementDescriptor-2925c6af.js";import"./number-e491b09e.js";import"./WGLContainer-d2730c65.js";import"./VertexArrayObject-553339a1.js";import"./ProgramTemplate-4db56880.js";import"./GeometryUtils-0f44b7c3.js";import"./alignmentUtils-ae955d28.js";import"./StyleDefinition-fbc907c2.js";import"./config-1337d16e.js";import"./earcut-626bfe99.js";import"./visualVariablesUtils-c34611a9.js";import"./cimAnalyzer-19dae0aa.js";import"./fontUtils-7e6ef232.js";import"./BidiEngine-9a40f2f4.js";import"./GeometryUtils-53652037.js";import"./utils-78b784da.js";import"./Rect-ea14f53a.js";import"./quantizationUtils-d80336d0.js";import"./floatRGBA-d6ce4858.js";import"./ExpandedCIM-b55b30d9.js";import"./clusterUtils-440b10b0.js";import"./util-e715e94a.js";import"./BitmapTileContainer-0743d7e2.js";import"./Bitmap-344fb3ff.js";import"./TileContainer-0671e700.js";import"./CircularArray-ef508845.js";import"./BufferPool-830d9783.js";import"./FeatureContainer-8bb6067b.js";import"./popupUtils-bd866d38.js";import"./RefreshableLayerView-c6e1df02.js";function g(i,e){return!i.visible||i.minScale!==0&&e>i.minScale||i.maxScale!==0&&e<i.maxScale}let n=class extends c{initialize(){this.addHandles([u(()=>this.view.scale,()=>this._update(),y)],"constructor")}isUpdating(){var p;const i=this.layer.sublayers.some(l=>l.renderer!=null),e=this._commandsQueue.updating,s=this._updatingRequiredFieldsPromise!=null,t=!this._proxy||!this._proxy.isReady,r=this._pipelineIsUpdating,o=this.tileRenderer==null||((p=this.tileRenderer)==null?void 0:p.updating),a=i&&(e||s||t||r||o);return h("esri-2d-log-updating")&&console.log(`Updating FLV2D: ${a}
  -> hasRenderer ${i}
  -> hasPendingCommand ${e}
  -> updatingRequiredFields ${s}
  -> updatingProxy ${t}
  -> updatingPipeline ${r}
  -> updatingTileRenderer ${o}
`),a}_injectOverrides(i){let e=super._injectOverrides(i);const s=this.view.scale,t=this.layer.sublayers.filter(o=>g(o,s)).map(o=>o.subtypeCode);if(!t.length)return e;e=e??new b().toJSON();const r=`NOT ${this.layer.subtypeField} IN (${t.join(",")})`;return e.where=e.where?`(${e.where}) AND (${r})`:r,e}_setLayersForFeature(i){const e=this.layer.fieldsIndex.get(this.layer.subtypeField),s=i.attributes[e.name],t=this.layer.sublayers.find(r=>r.subtypeCode===s);i.layer=i.sourceLayer=t}_createSchemaConfig(){const i={subtypeField:this.layer.subtypeField,sublayers:Array.from(this.layer.sublayers).map(r=>({featureReduction:null,geometryType:this.layer.geometryType,labelingInfo:r.labelingInfo,labelsVisible:r.labelsVisible,renderer:r.renderer,subtypeCode:r.subtypeCode,orderBy:null}))},e=this.layer.sublayers.map(r=>r.subtypeCode).join(","),s=this.layer.sublayers.length?`${this.layer.subtypeField} IN (${e})`:"1=2";let t=this.layer.definitionExpression?this.layer.definitionExpression+" AND ":"";return t+=s,{...super._createSchemaConfig(),...i,definitionExpression:t}}};n=m([d("esri.views.2d.layers.SubtypeGroupLayerView2D")],n);const ae=n;export{ae as default};
